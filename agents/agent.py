from pathlib import Path

from langchain_core.vectorstores.base import VectorStoreRetriever

from agents.graph_elements import GraphElements
from langgraph.graph.state import CompiledStateGraph


class RunAgent:
    """
    This class is responsible for running the agent graph.
    It takes a retriever and a configuration path as input,
    builds the agent graph, and provides a method to run the agent with a question.

    Parameters
    ----------
    retriever : VectorStoreRetriever
        The retriever to use for the agent graph.
    config_path : Path
        The path to the configuration file for the agent graph.
    """

    def __init__(
        self, retriever: VectorStoreRetriever, config_path: Path
    ) -> None:
        self.compiled_graph = self.build_agent_graph(
            retriever=retriever, config_path=config_path
        )

    @staticmethod
    def build_agent_graph(
        retriever: VectorStoreRetriever, config_path: Path
    ) -> CompiledStateGraph:
        """
        Build the agent graph using the provided retriever and configuration path.

        Parameters
        ----------
        retriever : VectorStoreRetriever
            The retriever to use for the agent graph.
        config_path : Path
            The path to the configuration file for the agent graph.

        Returns
        -------
        agent_graph : CompiledStateGraph
            The compiled agent graph.
        """
        graph_elements = GraphElements(
            retriever=retriever,
            config_path=config_path,
        )
        agent_graph = graph_elements.build_graph()
        return agent_graph

    def run_agent(self, question: str) -> str:
        """
        Run the agent with the provided question.

        Parameters
        ----------
        question : str
            The question to ask the agent.

        Returns
        -------
        answer : str
            The answer generated by the agent.
        """
        inputs = {"question": question}
        for output in self.compiled_graph.stream(inputs):
            output = output.get("generate", None)
            if output is not None:
                output = output.get("generation", None)
        return output
